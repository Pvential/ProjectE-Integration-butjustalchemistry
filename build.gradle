plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.13, 6.2)'
    id "org.jetbrains.changelog" version "1.3.+"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = mod_group_id
base {
    archivesName = "${mod_name}-${mc_version}"
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', project.mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dir 'libs'
    }
    maven {
        name 'CurseMaven'
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name 'Jitpack'
        url 'https://jitpack.io'
        content {
            includeGroup 'com.github'
        }
    }
    maven {
        name 'klikli_dev'
        url "https://dl.cloudsmith.io/public/klikli-dev/mods/maven/"
        content {
            includeGroup "com.klikli_dev"
        }
    }
    maven { name  'SmartBrainLib'; url 'https://dl.cloudsmith.io/public/tslat/sbl/maven/' }
    maven { name 'Architectury'; url 'https://maven.architectury.dev/' }
    maven { name 'BlameJared'; url 'https://maven.blamejared.com' }
    maven { name 'ChickenBones'; url 'https://chickenbones.net/maven/' }
    maven { name 'Covers1624'; url 'https://maven.covers1624.net/' }
    maven { name 'Ellpeck'; url 'https://maven.ellpeck.de' }
    maven { name 'GeckoMaven'; url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { name 'Progwml6'; url 'https://dvs1.progwml6.com/files/maven/' }
    maven { name 'Tamaized'; url 'https://maven.tamaized.com/releases' }
    maven { name 'TheIllusiveC4'; url 'https://maven.theillusivec4.top/' }
    maven { name 'TTerrag'; url 'https://maven.tterrag.com/' }
    maven { name 'Modmaven'; url 'https://modmaven.dev/' }
}

dependencies {
    minecraft "net.neoforged:forge:${mc_version}-${forge_version}"

    // ======================= [ Required Mods ] =======================
    implementation fg.deobf("curse.maven:projecte-226410:${version_projecte}")

    // ======================= [ Runtime Mods ] =======================
    implementation fg.deobf("smashingmods:alchemylib:${version_alchemylib}")
    runtimeOnly fg.deobf("curse.maven:alltheores-405593:${version_alltheores}")
    runtimeOnly fg.deobf("dev.architectury:architectury-forge:${version_architectury}")
    runtimeOnly fg.deobf("curse.maven:athena-841890:${version_athena}")
    runtimeOnly fg.deobf("curse.maven:balm-531761:${version_balm}")
    //runtimeOnly fg.deobf("curse.maven:brandons-core-231382:${version_brandonscore}")
    runtimeOnly fg.deobf("smashingmods:chemlib:${version_chemlib}")
    //runtimeOnly fg.deobf("curse.maven:citadel-331936:${version_citadel}")
    //runtimeOnly fg.deobf("codechicken:CodeChickenLib:${version_codechickenlib}:universal")
    //runtimeOnly fg.deobf("team.chisel.ctm:CTM:${version_ctm}")
    runtimeOnly fg.deobf("curse.maven:cucumber-272335:${version_cucumber}")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${version_curios}")
    runtimeOnly fg.deobf("curse.maven:cyclops-core-232758:${version_cyclopscore}")
    runtimeOnly fg.deobf("sirttas.dpanvil:DPAnvil:${version_datapackanvil}")
    //runtimeOnly fg.deobf("curse.maven:ftb-library-404465:${version_ftb_library}")
    runtimeOnly fg.deobf("software.bernie.geckolib:geckolib-forge-${version_geckolib}")
    //implementation fg.deobf("slimeknights.mantle:Mantle:${version_mantle}")
    compileOnly fg.deobf("com.klikli_dev:modonomicon-${mc_version}-common:${version_modonomicon}")
    implementation fg.deobf("com.klikli_dev:modonomicon-${mc_version}-forge:${version_modonomicon}")
    //runtimeOnly fg.deobf("curse.maven:myrtrees-546151:${version_myrtrees}")
    //runtimeOnly fg.deobf("curse.maven:obfuscate-289380:${version_obfuscate}")
    //runtimeOnly fg.deobf("curse.maven:observerlib-316833:${version_observerlib}")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${version_patchouli}")
    runtimeOnly fg.deobf("curse.maven:resourceful-lib-570073:${version_resourceful_lib}")
    implementation fg.deobf("net.tslat.smartbrainlib:SmartBrainLib-forge-${mc_version}:${version_smartbrainlib}")
    //runtimeOnly fg.deobf("curse.maven:structure-gel-api-378802:${version_structuregelapi}")

    // ======================= [ Optional Mods ] =======================
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${version_jei}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${version_jei}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${version_jei}")

    implementation fg.deobf("curse.maven:allthemodium-364466:${version_allthemodium}")
    implementation fg.deobf("appeng:appliedenergistics2-forge:${version_appliedenergistics}")
    implementation fg.deobf("smashingmods:alchemistry:${version_alchemistry}")
    //implementation fg.deobf("curse.maven:astralsorcery-241721:${version_astralsorcery}")
    implementation fg.deobf("curse.maven:ars-nouveau-401955:${version_arsnouveau}")
    implementation fg.deobf("curse.maven:blood-magic-224791:${version_bloodmagic}")
    //implementation fg.deobf("curse.maven:blue-skies-312918:${version_blueskies}")
    compileOnly fg.deobf("curse.maven:blue-skies-312918:${version_blueskies}")
    //implementation fg.deobf("vazkii.botania:Botania:${version_botania}")
    implementation fg.deobf("curse.maven:chipped-456956:${version_chipped}")
    //implementation fg.deobf("com.teamcofh:cofh_core:${mc_version}-${version_cofhcore}")
    //implementation fg.deobf("curse.maven:compactcrafting-429735:${version_compactcrafting}")
    implementation fg.deobf("curse.maven:corail-woodcutter-331983:${version_corail_woodcutter}")
    //implementation fg.deobf("com.simibubi.create:Create:${version_create}")
    //implementation fg.deobf("curse.maven:create-328085:${version_create}")
    //implementation fg.deobf("curse.maven:draconic-evolution-223565:${version_draconicevolution}")
    implementation fg.deobf("curse.maven:elemental-craft-395158:${version_elementalcraft}")
    implementation fg.deobf("curse.maven:evilcraft-74610:${version_evilcraft}")
    //implementation fg.deobf("curse.maven:exnihilo-sequentia-400012:${version_exnihilo_sequentia}")
    //implementation fg.deobf("blank:ExNihiloSequentia-1.19.2-4.0.0.43:beta")
    implementation fg.deobf("curse.maven:extended-crafting-268387:${version_extendedcrafting}")
    implementation fg.deobf("curse.maven:farmers-delight-398521:${version_farmersdelight}")
    implementation fg.deobf("curse.maven:farming-for-blockheads-261924:${version_farmingforblockheads}")
    //implementation fg.deobf("curse.maven:ftb-industrial-contraptions-539097:${version_ftb_industrial_contraptions}")
    //compileOnly fg.deobf("curse.maven:ice-and-fire-264231:${version_iceandfire}")
    implementation fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${version_immersiveengineering}")
    implementation fg.deobf("com.buuz135:industrial-foregoing:${version_industrialforegoing}")
    //implementation fg.deobf("curse.maven:mana-and-artifice-406360:${version_manaandartifice}")
    //implementation fg.deobf("curse.maven:mrcrayfishs-vehicle-mod-286660:${version_mrcrayfishs_vehicle_mod}")
    implementation fg.deobf("curse.maven:mystical-agriculture-246640:${version_mysticalagriculture}")
    implementation fg.deobf("de.ellpeck.naturesaura:NaturesAura:${version_naturesaura}", {
        exclude group: '*'
    })
    implementation fg.deobf("com.klikli_dev:occultism-${version_occultism}", { // WARNING/NOTE: runData doesn't work with occultism
        exclude group: '*'
    })
    //implementation fg.deobf("curse.maven:pams-harvestcraft-2-food-core-372534:${version_pamsharvestcraftfoodcore}")
    //implementation fg.deobf("curse.maven:pams-harvestcraft-2-crops-361385:${version_pamsharvestcraftcrops}")
    //implementation fg.deobf("curse.maven:pams-harvestcraft-2-food-extended-402231:${version_pamsharvestcraftfoodextended}")
    implementation fg.deobf("me.desht.pneumaticcraft:pneumaticcraft-repressurized:${version_pneumaticcraft}")
    //implementation fg.deobf("vazkii.psi:Psi:${version_psi}")
    //implementation fg.deobf("com.teamcofh:thermal_core:${mc_version}-${version_thermal_core}")
    //implementation fg.deobf("com.teamcofh:thermal_cultivation:${mc_version}-${version_thermalcultivation}")
    //implementation fg.deobf("com.teamcofh:thermal_expansion:${mc_version}-${version_thermalexpansion}")
    //implementation fg.deobf("com.teamcofh:thermal_foundation:${mc_version}-${version_thermalfoundation}")
    //implementation fg.deobf("com.teamcofh:thermal_innovation:${mc_version}-${version_thermalinnovation}")
    //implementation fg.deobf("com.teamcofh:thermal_integration:${mc_version}-${version_thermalintegration}")
    //implementation fg.deobf("com.teamcofh:thermal_locomotion:${mc_version}-${version_thermallocomotion}")
    //implementation fg.deobf("slimeknights.tconstruct:TConstruct:${version_tinkers}")
    implementation fg.deobf("com.hrznstudio:titanium:${version_titanium}")
    //implementation fg.deobf("curse.maven:touhou_little_maid-355044:${version_touhou_little_maid}")
    //implementation fg.deobf("curse.maven:woot-244049:${version_woot}")
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: mc_version, minecraft_version_range: mc_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

javadoc {
    source = [sourceSets.main.allJava]
    // prevent java 8's strict doclint for javadocs from failing builds
    options.addStringOption('Xdoclint:none', '-quiet')
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveBaseName.set(project.archivesBaseName)
    archiveVersion.set("${project.version}")
    archiveClassifier.set('sources')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
}

artifacts {
    archives jar, sourcesJar, javadocJar
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId = mod_name
            group = "com.tagnumelite"
            artifacts {
                jar
                sourcesJar
                javadocJar
            }
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
        // GitHub Packages
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/tagnumelite/projecte-integration"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

changelog {
    version = "${project.version}"
    path = "${project.projectDir}/CHANGELOG.md"
    header = "[${-> version.get()}]"
    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    groups = ["Added", "Changed", "Ported", "Deprecated", "Removed", "Fixed", "Security"]
}

if (System.getenv().CURSEFORGE_API_KEY != null) {
    curseforge {
        apiKey System.getenv().CURSEFORGE_API_KEY
        project {
            id = "${cf_project}"
            addGameVersion "${mc_version}"
            changelog = "${project.changelog.get(mod_version).toString()}"
            changelogType = 'markdown'
            releaseType = "${release_type}"

            mainArtifact(jar) {
                relations {
                    requiredDependency 'projecte'

                    optionalDependency 'allthemodium'
                    optionalDependency 'applied-energistics-2'
                    optionalDependency 'alchemistry'
                    optionalDependency 'ars-nouveau'
                    //optionalDependency 'astral-sorcery'
                    optionalDependency 'blood-magic'
                    optionalDependency 'blue-skies'
                    //optionalDependency 'botania'
                    optionalDependency 'chipped'
                    //optionalDependency 'compact-crafting'
                    //optionalDependency 'create'
                    optionalDependency 'corail-woodcutter'
                    //optionalDependency 'draconic-evolution'
                    optionalDependency 'elemental-craft'
                    optionalDependency 'evilcraft'
                    //optionalDependency 'ex-nihilo-sequentia'
                    optionalDependency 'extended-crafting'
                    optionalDependency 'farmers-delight'
                    optionalDependency 'farming-for-blockheads'
                    //optionalDependency 'ftb-industrial-contraptions-forge'
                    //optionalDependency 'ice-and-fire-dragons'
                    optionalDependency 'immersive-engineering'
                    optionalDependency 'industrial-foregoing'
                    //optionalDependency 'mana-and-artifice'
                    //optionalDependency 'mrcrayfishs-vehicle-mod'
                    optionalDependency 'mystical-agriculture'
                    optionalDependency 'natures-aura'
                    optionalDependency 'occultism'
                    //optionalDependency 'pams-harvestcraft-2-food-core'
                    //optionalDependency 'pams-harvestcraft-2-crops'
                    //optionalDependency 'pams-harvestcraft-2-food-extended'
                    optionalDependency 'pneumaticcraft-repressurized'
                    //optionalDependency 'psi'
					//optionalDependency 'thermal-expansion'
					//optionalDependency 'thermal-foundation'
                    //optionalDependency 'tinkers-construct'
                    //optionalDependency 'touhou-little-maid'
                    //optionalDependency 'woot'
                }
            }
        }
    }
}
